class extras.Test$NestedTest$NestedNestedTest extends java.lang.Object
{
    extras.Test test;
    extras.Test2 test2;
    extras.Test2 myTest2;
    final extras.Test$NestedTest this$1;

    public void <init>(extras.Test$NestedTest)
    {
        extras.Test$NestedTest$NestedNestedTest this;
        extras.Test$NestedTest this$1;
        extras.Test localTest, $r0;

        this := @this: extras.Test$NestedTest$NestedNestedTest;
        this$1 := @parameter0: extras.Test$NestedTest;
        this.<extras.Test$NestedTest$NestedNestedTest: extras.Test$NestedTest this$1> = this$1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new extras.Test;
        specialinvoke $r0.<extras.Test: void <init>()>();
        localTest = $r0;
        this.<extras.Test$NestedTest$NestedNestedTest: extras.Test test> = localTest;
        return;
    }

    public void speak()
    {
        extras.Test$NestedTest$NestedNestedTest this;
        extras.Test $r0, speakTest;

        this := @this: extras.Test$NestedTest$NestedNestedTest;
        $r0 = new extras.Test;
        specialinvoke $r0.<extras.Test: void <init>()>();
        speakTest = $r0;
        return;
    }

    public void speak(extras.Test$NestedTest$NestedNestedTest, extras.Test$NestedTest)
    {
        extras.Test$NestedTest$NestedNestedTest this, nnTest, e;
        extras.Test$NestedTest nTest, nestedTest, d, $r2, $r3;
        extras.Test2 $r0, a, b;
        extras.Test c, $r1, $r4;

        this := @this: extras.Test$NestedTest$NestedNestedTest;
        nnTest := @parameter0: extras.Test$NestedTest$NestedNestedTest;
        nTest := @parameter1: extras.Test$NestedTest;
        $r0 = new extras.Test2;
        specialinvoke $r0.<extras.Test2: void <init>()>();
        a = $r0;
        $r0 = new extras.Test2;
        specialinvoke $r0.<extras.Test2: void <init>()>();
        b = $r0;
        $r1 = new extras.Test;
        specialinvoke $r1.<extras.Test: void <init>()>();
        c = $r1;
        $r2 = new extras.Test$NestedTest;
        $r3 = this.<extras.Test$NestedTest$NestedNestedTest: extras.Test$NestedTest this$1>;
        $r4 = $r3.<extras.Test$NestedTest: extras.Test this$0>;
        specialinvoke $r2.<extras.Test$NestedTest: void <init>(extras.Test,extras.Test2,extras.Test2,extras.Test)>($r4, a, b, c);
        nestedTest = $r2;
        d = nTest;
        e = nnTest;
        return;
    }
}
